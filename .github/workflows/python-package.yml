name: Build Wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
      - uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install build dependencies
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel setuptools numpy

      # ===== LINUX SETUP =====
      - name: Install FLAC (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libflac-dev libflac++-dev
          echo "CIBW_ENVIRONMENT=FLAC_INCLUDE_DIR=/usr/include FLAC_LIB_DIR=/usr/lib/x86_64-linux-gnu CFLAGS=-I/usr/include LDFLAGS=-L/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          
      # ===== MACOS SETUP =====
      - name: Install FLAC (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install flac
          echo "CIBW_ENVIRONMENT=FLAC_INCLUDE_DIR=/usr/local/include FLAC_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV

      # ===== WINDOWS SETUP =====
      - name: Install FLAC (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y mingw
          # Use a simple vcpkg setup for Windows
          git clone --depth=1 https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg install flac:x64-windows
          echo "CIBW_ENVIRONMENT=FLAC_INCLUDE_DIR=$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/include FLAC_LIB_DIR=$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Install cibuildwheel
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      # Build the wheels
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build only for Python 3.10+
          CIBW_BUILD: "cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux_*"
          
          # Install numpy before building
          CIBW_BEFORE_BUILD: "pip install numpy"
          
          # Building verbosity
          CIBW_BUILD_VERBOSITY: 3
          
          # Manylinux specific settings
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          
          # Repair wheels to include shared libraries
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          
          # Test the built wheel
          CIBW_TEST_REQUIRES: "numpy"
          CIBW_TEST_COMMAND: "python -c \"import flacpy; print('Import successful')\""

      # Upload the wheels
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl