name: Build Wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
      - uses: actions/checkout@v3
      
      # Install system dependencies - Linux
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libflac-dev libflac++-dev
          
          # Find where FLAC is actually installed
          echo "Checking include files:"
          find /usr -name "FLAC*" | grep include
          echo "Checking library files:"
          find /usr/lib* -name "*flac*" | grep -v "debug"
          
          # Explicitly check architecture-specific paths
          echo "Architecture-specific paths:"
          ls -la /usr/include/x86_64-linux-gnu/FLAC* || echo "No arch-specific FLAC headers"
          ls -la /usr/lib/x86_64-linux-gnu/libFLAC* || echo "No arch-specific FLAC libs"
          
          # First check for architecture-specific paths, then fall back to standard paths
          if [ -d "/usr/include/x86_64-linux-gnu/FLAC++" ]; then
            echo "FLAC_INCLUDE_DIR=/usr/include/x86_64-linux-gnu" >> $GITHUB_ENV
          else
            echo "FLAC_INCLUDE_DIR=$(dirname $(find /usr -name "FLAC++/metadata.h" | head -1))" >> $GITHUB_ENV
          fi
          
          if [ -f "/usr/lib/x86_64-linux-gnu/libFLAC++.so" ]; then
            echo "FLAC_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          else
            echo "FLAC_LIB_DIR=$(dirname $(find /usr/lib* -name "libFLAC++.so*" | head -1))" >> $GITHUB_ENV
          fi
          
          # Print selected paths for verification
          echo "Selected FLAC_INCLUDE_DIR: $FLAC_INCLUDE_DIR"
          echo "Selected FLAC_LIB_DIR: $FLAC_LIB_DIR"
      
      # Install system dependencies - macOS
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc flac
          echo "FLAC_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "FLAC_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          
      # Install system dependencies - Windows
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # More detailed Windows setup
          choco install -y mingw
          
          # Use vcpkg for FLAC libraries on Windows
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install flac:x64-windows
          ./vcpkg integrate install
          
          # Set environment variables for the build
          echo "FLAC_INCLUDE_DIR=$VCPKG_INSTALLATION_ROOT/installed/x64-windows/include" >> $GITHUB_ENV
          echo "FLAC_LIB_DIR=$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib" >> $GITHUB_ENV
          
      # debug info
      - name: Debug Information (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          python --version
          pip --version
          pip list
          
          # Print current directory structure (Unix style)
          ls -la

      - name: Debug Information (Windows)
        if: runner.os == 'Windows'
        run: |
          python --version
          pip --version
          pip list
          
          # Print current directory structure (Windows style)
          Get-ChildItem -Force
          
      # Build wheels with verbose output
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BEFORE_BUILD: "pip install numpy -v"
          CIBW_BUILD_VERBOSITY: 3
          # Skip PyPy builds
          CIBW_SKIP: "pp* *-musllinux_*"
          # Pass environment variables to the build
          CIBW_ENVIRONMENT: >
            FLAC_INCLUDE_DIR="${{ env.FLAC_INCLUDE_DIR }}"
            FLAC_LIB_DIR="${{ env.FLAC_LIB_DIR }}"
          # Test importing the module works
          CIBW_TEST_REQUIRES: "numpy"
          CIBW_TEST_COMMAND: "python -c \"import flacpy; print(flacpy.__file__)\""
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl