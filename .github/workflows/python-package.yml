name: Build Wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
      - uses: actions/checkout@v3
      
      # Install system dependencies - Linux
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libflac-dev libflac++-dev
          
          # Verify FLAC installation
          dpkg -L libflac-dev
          dpkg -L libflac++-dev
          
          # Check where FLAC headers actually are
          find /usr -name "stream_decoder.h" -path "*/FLAC/*" 2>/dev/null
          
          # Set FLAC paths based on actual locations
          FLAC_INCLUDE=$(dirname $(dirname $(find /usr -name "stream_decoder.h" -path "*/FLAC/*" 2>/dev/null | head -1)))
          echo "FLAC_INCLUDE_DIR=$FLAC_INCLUDE" >> $GITHUB_ENV
          
          FLAC_LIB=$(dirname $(find /usr/lib* -name "libFLAC++.so*" 2>/dev/null | head -1))
          echo "FLAC_LIB_DIR=$FLAC_LIB" >> $GITHUB_ENV
          
          echo "Selected FLAC_INCLUDE_DIR: $FLAC_INCLUDE"
          echo "Selected FLAC_LIB_DIR: $FLAC_LIB"
          
          # Verify the files exist
          ls -la $FLAC_INCLUDE/FLAC
          ls -la $FLAC_LIB/libFLAC*.so*
      
      # Install system dependencies - macOS
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc flac
          echo "FLAC_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "FLAC_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          
      # Install system dependencies - Windows
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # More detailed Windows setup
          choco install -y mingw
          
          # Use vcpkg for FLAC libraries on Windows
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install flac:x64-windows
          ./vcpkg integrate install
          
          # Set environment variables for the build
          echo "FLAC_INCLUDE_DIR=$VCPKG_INSTALLATION_ROOT/installed/x64-windows/include" >> $GITHUB_ENV
          echo "FLAC_LIB_DIR=$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib" >> $GITHUB_ENV
      
      # Create setup.cfg to explicitly include paths
      - name: Create setup.cfg with include paths
        run: |
          echo "[build_ext]" > setup.cfg
          echo "include_dirs=${{ env.FLAC_INCLUDE_DIR }}" >> setup.cfg
          echo "library_dirs=${{ env.FLAC_LIB_DIR }}" >> setup.cfg
          cat setup.cfg
      
      # Debug info
      - name: Debug Information (All)
        run: |
          python --version
          pip --version
          pip list
          echo "FLAC_INCLUDE_DIR=${{ env.FLAC_INCLUDE_DIR }}"
          echo "FLAC_LIB_DIR=${{ env.FLAC_LIB_DIR }}"
      
      # Build wheels with verbose output
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BEFORE_BUILD: "pip install numpy -v"
          CIBW_BUILD_VERBOSITY: 3
          # Skip PyPy and older Python versions that aren't compatible
          CIBW_SKIP: "pp* *-musllinux_* cp36-* cp37-* cp39-*"
          # Only build for Python 3.10+ which has better compatibility
          CIBW_BUILD: "cp310-* cp311-* cp312-*"
          # Pass environment variables to the build - use different syntax for Windows
          CIBW_ENVIRONMENT_LINUX: >
            FLAC_INCLUDE_DIR="${{ env.FLAC_INCLUDE_DIR }}"
            FLAC_LIB_DIR="${{ env.FLAC_LIB_DIR }}"
            CFLAGS="-I${{ env.FLAC_INCLUDE_DIR }}"
            LDFLAGS="-L${{ env.FLAC_LIB_DIR }}"
          CIBW_ENVIRONMENT_MACOS: >
            FLAC_INCLUDE_DIR="${{ env.FLAC_INCLUDE_DIR }}"
            FLAC_LIB_DIR="${{ env.FLAC_LIB_DIR }}"
            CFLAGS="-I${{ env.FLAC_INCLUDE_DIR }}"
            LDFLAGS="-L${{ env.FLAC_LIB_DIR }}"
          CIBW_ENVIRONMENT_WINDOWS: >
            FLAC_INCLUDE_DIR="${{ env.FLAC_INCLUDE_DIR }}"
            FLAC_LIB_DIR="${{ env.FLAC_LIB_DIR }}"
          # Test importing the module works
          CIBW_TEST_REQUIRES: "numpy"
          CIBW_TEST_COMMAND: "python -c \"import flacpy; print(flacpy.__file__)\""
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl